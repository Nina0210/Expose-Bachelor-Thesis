@article{jayaram_dynamic_2024,
    title = {Dynamic {PageRank}: {Algorithms} and {Lower} {Bounds}},
    volume = {297},
    copyright = {Creative Commons Attribution 4.0 International license, info:eu-repo/semantics/openAccess},
    issn = {1868-8969},
    shorttitle = {Dynamic {PageRank}},
    url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ICALP.2024.90},
    doi = {10.4230/LIPICS.ICALP.2024.90},
    abstract = {We consider the PageRank problem in the dynamic setting, where the goal is to explicitly maintain an approximate PageRank vector π ∈ Rn for a graph under a sequence of edge insertions and deletions. Our main result is a complete characterization of the complexity of dynamic PageRank maintenance for both multiplicative and additive (L1) approximations.},
    language = {en},
    urldate = {2025-04-03},
    journal = {LIPIcs, Volume 297, ICALP 2024},
    author = {Jayaram, Rajesh and Łącki, Jakub and Mitrović, Slobodan and Onak, Krzysztof and Sankowski, Piotr},
    editor = {Bringmann, Karl and Grohe, Martin and Puppis, Gabriele and Svensson, Ola},
    year = {2024},
    note = {Artwork Size: 19 pages, 898032 bytes
ISBN: 9783959773225
Medium: application/pdf
Publisher: Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
    keywords = {Information systems → Page and site ranking, Mathematics of computing → Graph algorithms, PageRank, Theory of computation → Dynamic graph algorithms, Theory of computation → Random walks and Markov chains, dynamic algorithms, graph algorithms},
    pages = {90:1--90:19},
}
@misc{page_pagerank_1999,
    type = {Techreport},
    title = {The {PageRank} {Citation} {Ranking}: {Bringing} {Order} to the {Web}.},
    shorttitle = {The {PageRank} {Citation} {Ranking}},
    url = {http://ilpubs.stanford.edu:8090/422/?utm_campaign=Technical%20SEO%20Weekly&utm_medium=email&utm_source=Revue%20newsletter},
    abstract = {The importance of a Web page is an inherently subjective matter, which depends on the readers interests, knowledge and attitudes. But there is still much that can be said objectively about the relative importance of Web pages. This paper describes PageRank, a mathod for rating Web pages objectively and mechanically, effectively measuring the human interest and attention devoted to them. We compare PageRank to an idealized random Web surfer. We show how to efficiently compute PageRank for large numbers of pages. And, we show how to apply PageRank to search and to user navigation.},
    urldate = {2025-04-04},
    author = {Page, Lawrence and Brin, Sergey and Motwani, Rajeev and Winograd, Terry},
    month = nov,
    year = {1999},
    note = {Publisher: Stanford InfoLab},
}
@inproceedings{malewicz_pregel_2010,
    address = {New York, NY, USA},
    series = {{SIGMOD} '10},
    title = {Pregel: a system for large-scale graph processing},
    isbn = {978-1-4503-0032-2},
    shorttitle = {Pregel},
    url = {https://dl.acm.org/doi/10.1145/1807167.1807184},
    doi = {10.1145/1807167.1807184},
    abstract = {Many practical computing problems concern large graphs. Standard examples include the Web graph and various social networks. The scale of these graphs - in some cases billions of vertices, trillions of edges - poses challenges to their efficient processing. In this paper we present a computational model suitable for this task. Programs are expressed as a sequence of iterations, in each of which a vertex can receive messages sent in the previous iteration, send messages to other vertices, and modify its own state and that of its outgoing edges or mutate graph topology. This vertex-centric approach is flexible enough to express a broad set of algorithms. The model has been designed for efficient, scalable and fault-tolerant implementation on clusters of thousands of commodity computers, and its implied synchronicity makes reasoning about programs easier. Distribution-related details are hidden behind an abstract API. The result is a framework for processing large graphs that is expressive and easy to program.},
    urldate = {2025-03-10},
    booktitle = {Proceedings of the 2010 {ACM} {SIGMOD} {International} {Conference} on {Management} of data},
    publisher = {Association for Computing Machinery},
    author = {Malewicz, Grzegorz and Austern, Matthew H. and Bik, Aart J.C and Dehnert, James C. and Horn, Ilan and Leiser, Naty and Czajkowski, Grzegorz},
    month = jun,
    year = {2010},
    pages = {135--146},
}
@article{xu_graphscope_2021,
    title = {{GraphScope}: a one-stop large graph processing system},
    volume = {14},
    issn = {2150-8097},
    shorttitle = {{GraphScope}},
    url = {https://dl.acm.org/doi/10.14778/3476311.3476324},
    doi = {10.14778/3476311.3476324},
    abstract = {Due to diverse graph data and algorithms, programming and orchestration of complex computation pipelines have become the major challenges to making use of graph applications for Web-scale data analysis. GraphScope aims to provide a one-stop and efficient solution for a wide range of graph computations at scale. It extends previous systems by offering a unified and high-level programming interface and allowing the seamless integration of specialized graph engines in a general data-parallel computing environment.As we will show in this demo, GraphScope enables developers to write sequential graph programs in Python and provides automatic parallel execution on a cluster. This further allows GraphScope to seamlessly integrate with existing data processing systems in PyData ecosystem. To validate GraphScope's efficiency, we will compare a complex, multi-staged processing pipeline for a real-life fraud detection task with a manually assembled implementation comprising multiple systems. GraphScope achieves a 2.86× speedup on a trillion-scale graph in real production at Alibaba.},
    number = {12},
    urldate = {2025-04-11},
    journal = {Proc. VLDB Endow.},
    author = {Xu, Jingbo and Bai, Zhanning and Fan, Wenfei and Lai, Longbin and Li, Xue and Li, Zhao and Qian, Zhengping and Wang, Lei and Wang, Yanyan and Yu, Wenyuan and Zhou, Jingren},
    month = jul,
    year = {2021},
    pages = {2703--2706},
}